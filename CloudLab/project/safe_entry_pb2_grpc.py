# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import safe_entry_pb2 as safe__entry__pb2


class SafeEntryStub(object):
    """python -m grpc_tools.protoc -I . --python_out=. --grpc_python_out=. safe_entry.proto

    The service definition
    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.Login = channel.unary_unary(
                '/safe_entry.SafeEntry/Login',
                request_serializer=safe__entry__pb2.LoginRequest.SerializeToString,
                response_deserializer=safe__entry__pb2.LoginResponse.FromString,
                )
        self.Logout = channel.unary_unary(
                '/safe_entry.SafeEntry/Logout',
                request_serializer=safe__entry__pb2.LoginRequest.SerializeToString,
                response_deserializer=safe__entry__pb2.LoginResponse.FromString,
                )
        self.NotificationCheck = channel.unary_unary(
                '/safe_entry.SafeEntry/NotificationCheck',
                request_serializer=safe__entry__pb2.NRIC.SerializeToString,
                response_deserializer=safe__entry__pb2.NotificationListResponse.FromString,
                )
        self.SubscribeNotification = channel.unary_stream(
                '/safe_entry.SafeEntry/SubscribeNotification',
                request_serializer=safe__entry__pb2.NRIC.SerializeToString,
                response_deserializer=safe__entry__pb2.NotificationResponse.FromString,
                )
        self.CheckForStatus = channel.unary_unary(
                '/safe_entry.SafeEntry/CheckForStatus',
                request_serializer=safe__entry__pb2.NRIC.SerializeToString,
                response_deserializer=safe__entry__pb2.CheckResponse.FromString,
                )
        self.SingleCheckIn = channel.unary_unary(
                '/safe_entry.SafeEntry/SingleCheckIn',
                request_serializer=safe__entry__pb2.CheckRequest.SerializeToString,
                response_deserializer=safe__entry__pb2.CheckResponse.FromString,
                )
        self.SingleCheckOut = channel.unary_unary(
                '/safe_entry.SafeEntry/SingleCheckOut',
                request_serializer=safe__entry__pb2.CheckRequest.SerializeToString,
                response_deserializer=safe__entry__pb2.CheckResponse.FromString,
                )
        self.GroupCheckIn = channel.unary_unary(
                '/safe_entry.SafeEntry/GroupCheckIn',
                request_serializer=safe__entry__pb2.GroupCheckRequest.SerializeToString,
                response_deserializer=safe__entry__pb2.CheckResponse.FromString,
                )
        self.GroupCheckOut = channel.unary_unary(
                '/safe_entry.SafeEntry/GroupCheckOut',
                request_serializer=safe__entry__pb2.CheckRequest.SerializeToString,
                response_deserializer=safe__entry__pb2.CheckResponse.FromString,
                )
        self.ListHistory = channel.unary_unary(
                '/safe_entry.SafeEntry/ListHistory',
                request_serializer=safe__entry__pb2.HistoryRequest.SerializeToString,
                response_deserializer=safe__entry__pb2.HistoryListResponse.FromString,
                )
        self.NotifyCovidCase = channel.unary_unary(
                '/safe_entry.SafeEntry/NotifyCovidCase',
                request_serializer=safe__entry__pb2.NotificationRequest.SerializeToString,
                response_deserializer=safe__entry__pb2.Empty.FromString,
                )


class SafeEntryServicer(object):
    """python -m grpc_tools.protoc -I . --python_out=. --grpc_python_out=. safe_entry.proto

    The service definition
    """

    def Login(self, request, context):
        """Login and Logout of the server
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Logout(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NotificationCheck(self, request, context):
        """Check if user has notification message(s) for possible exposure of covid
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SubscribeNotification(self, request, context):
        """User's open stream to check for live notifications from a separate thread
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CheckForStatus(self, request, context):
        """Check user's latest SafeEntry record check in/out status
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SingleCheckIn(self, request, context):
        """Single check in/out
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SingleCheckOut(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GroupCheckIn(self, request, context):
        """Group check in/out
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def GroupCheckOut(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def ListHistory(self, request, context):
        """List user's history date, location and check in/out time
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def NotifyCovidCase(self, request, context):
        """Special remote access
        MOH officers able to declare location has been visited by a COVID-19 case.
        Able to set the date, time and location of exposure of covid case.
        This function will able record and sent a notification to possible affected users
        based on SafeEntry records 
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SafeEntryServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'Login': grpc.unary_unary_rpc_method_handler(
                    servicer.Login,
                    request_deserializer=safe__entry__pb2.LoginRequest.FromString,
                    response_serializer=safe__entry__pb2.LoginResponse.SerializeToString,
            ),
            'Logout': grpc.unary_unary_rpc_method_handler(
                    servicer.Logout,
                    request_deserializer=safe__entry__pb2.LoginRequest.FromString,
                    response_serializer=safe__entry__pb2.LoginResponse.SerializeToString,
            ),
            'NotificationCheck': grpc.unary_unary_rpc_method_handler(
                    servicer.NotificationCheck,
                    request_deserializer=safe__entry__pb2.NRIC.FromString,
                    response_serializer=safe__entry__pb2.NotificationListResponse.SerializeToString,
            ),
            'SubscribeNotification': grpc.unary_stream_rpc_method_handler(
                    servicer.SubscribeNotification,
                    request_deserializer=safe__entry__pb2.NRIC.FromString,
                    response_serializer=safe__entry__pb2.NotificationResponse.SerializeToString,
            ),
            'CheckForStatus': grpc.unary_unary_rpc_method_handler(
                    servicer.CheckForStatus,
                    request_deserializer=safe__entry__pb2.NRIC.FromString,
                    response_serializer=safe__entry__pb2.CheckResponse.SerializeToString,
            ),
            'SingleCheckIn': grpc.unary_unary_rpc_method_handler(
                    servicer.SingleCheckIn,
                    request_deserializer=safe__entry__pb2.CheckRequest.FromString,
                    response_serializer=safe__entry__pb2.CheckResponse.SerializeToString,
            ),
            'SingleCheckOut': grpc.unary_unary_rpc_method_handler(
                    servicer.SingleCheckOut,
                    request_deserializer=safe__entry__pb2.CheckRequest.FromString,
                    response_serializer=safe__entry__pb2.CheckResponse.SerializeToString,
            ),
            'GroupCheckIn': grpc.unary_unary_rpc_method_handler(
                    servicer.GroupCheckIn,
                    request_deserializer=safe__entry__pb2.GroupCheckRequest.FromString,
                    response_serializer=safe__entry__pb2.CheckResponse.SerializeToString,
            ),
            'GroupCheckOut': grpc.unary_unary_rpc_method_handler(
                    servicer.GroupCheckOut,
                    request_deserializer=safe__entry__pb2.CheckRequest.FromString,
                    response_serializer=safe__entry__pb2.CheckResponse.SerializeToString,
            ),
            'ListHistory': grpc.unary_unary_rpc_method_handler(
                    servicer.ListHistory,
                    request_deserializer=safe__entry__pb2.HistoryRequest.FromString,
                    response_serializer=safe__entry__pb2.HistoryListResponse.SerializeToString,
            ),
            'NotifyCovidCase': grpc.unary_unary_rpc_method_handler(
                    servicer.NotifyCovidCase,
                    request_deserializer=safe__entry__pb2.NotificationRequest.FromString,
                    response_serializer=safe__entry__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'safe_entry.SafeEntry', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SafeEntry(object):
    """python -m grpc_tools.protoc -I . --python_out=. --grpc_python_out=. safe_entry.proto

    The service definition
    """

    @staticmethod
    def Login(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/safe_entry.SafeEntry/Login',
            safe__entry__pb2.LoginRequest.SerializeToString,
            safe__entry__pb2.LoginResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Logout(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/safe_entry.SafeEntry/Logout',
            safe__entry__pb2.LoginRequest.SerializeToString,
            safe__entry__pb2.LoginResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NotificationCheck(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/safe_entry.SafeEntry/NotificationCheck',
            safe__entry__pb2.NRIC.SerializeToString,
            safe__entry__pb2.NotificationListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SubscribeNotification(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_stream(request, target, '/safe_entry.SafeEntry/SubscribeNotification',
            safe__entry__pb2.NRIC.SerializeToString,
            safe__entry__pb2.NotificationResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def CheckForStatus(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/safe_entry.SafeEntry/CheckForStatus',
            safe__entry__pb2.NRIC.SerializeToString,
            safe__entry__pb2.CheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SingleCheckIn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/safe_entry.SafeEntry/SingleCheckIn',
            safe__entry__pb2.CheckRequest.SerializeToString,
            safe__entry__pb2.CheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def SingleCheckOut(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/safe_entry.SafeEntry/SingleCheckOut',
            safe__entry__pb2.CheckRequest.SerializeToString,
            safe__entry__pb2.CheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GroupCheckIn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/safe_entry.SafeEntry/GroupCheckIn',
            safe__entry__pb2.GroupCheckRequest.SerializeToString,
            safe__entry__pb2.CheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def GroupCheckOut(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/safe_entry.SafeEntry/GroupCheckOut',
            safe__entry__pb2.CheckRequest.SerializeToString,
            safe__entry__pb2.CheckResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def ListHistory(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/safe_entry.SafeEntry/ListHistory',
            safe__entry__pb2.HistoryRequest.SerializeToString,
            safe__entry__pb2.HistoryListResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def NotifyCovidCase(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/safe_entry.SafeEntry/NotifyCovidCase',
            safe__entry__pb2.NotificationRequest.SerializeToString,
            safe__entry__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
